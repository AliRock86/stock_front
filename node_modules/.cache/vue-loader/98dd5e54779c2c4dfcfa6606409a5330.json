{"remainingRequest":"/Users/haideraltemimy/Documents/GitHub/ahjezly_front_old/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/haideraltemimy/Documents/GitHub/ahjezly_front_old/src/components/Owner/components/map.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/haideraltemimy/Documents/GitHub/ahjezly_front_old/src/components/Owner/components/map.vue","mtime":1586781513949},{"path":"/Users/haideraltemimy/Documents/GitHub/ahjezly_front_old/node_modules/vuetify-loader/lib/loader.js","mtime":1574476662000},{"path":"/Users/haideraltemimy/Documents/GitHub/ahjezly_front_old/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/haideraltemimy/Documents/GitHub/ahjezly_front_old/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\n\n\n\nexport default {\n   props: {\n      'latt': String,\n      'long': String\n    },\n  name: \"GoogleMap\",\n  data() {\n    return {\n      // default to Montreal to keep it simple\n      // change this to whatever makes sense\n      center: { lat: 45.508, lng: -73.587 },\n      markers: [],\n      places: [],\n      lat:0,\n      lng:0,\n      currentPlace: null\n    };\n  },\n\n  mounted() {\n    this.geolocate()\n\n       \n      \n        const marker = {\n          lat: parseFloat(this.latt),\n       lng: parseFloat(this.long)\n       };\n            this.markers.push({ position: marker });\n        this.places.push(position);\n        this.center = marker;\n        this.currentPlace = null;\n        this.lat=position.coords.latitude;\n        this.lng=position.coords.longitude;\n   \n\n   \n  },\n\n  methods: {\n    // receives a place object via the autocomplete component\n    setPlace(place) {\n    this.currentPlace = place;\n    console.log(this.currentPlace)\n   \n\n    },\n    addMarker() {\n      // if (this.currentPlace) {\n      //   const marker = {\n      //     lat: this.currentPlace.geometry.location.lat(),\n      //     lng: this.currentPlace.geometry.location.lng()\n      //   };\n      //   this.markers.push({ position: marker });\n      //   this.places.push(this.currentPlace);\n      //   this.center = marker;\n      //   this.currentPlace = null;\n      // }\n       navigator.geolocation.getCurrentPosition(position => {\n\n       \n        this.lat= position.coords.latitude;\n        this.lng=position.coords.longitude;\n        const marker = {\n          lat: this.lat,\n       lng: this.lng\n       };\n            this.markers.push({ position: marker });\n        this.places.push(position);\n        this.center = marker;\n        this.currentPlace = null;\n        this.lat=position.coords.latitude;\n        this.lng=position.coords.longitude;\n      });\n\n     \n      \n\n    },\n    geolocate: function() {\n      navigator.geolocation.getCurrentPosition(position => {\n\n        this.center = {\n          lat: position.coords.latitude,\n          lng: position.coords.longitude\n        };\n      \n      });\n   \n     \n       //this.$emit(\"getmyLocation\",this.center.lat,this.center.lng);\n    },\n    getlocation(){\n      this.$emit(\"getmyLocation\",this.lat,this.lng);\n    },\n     cancelDailog(){\n      this.$emit(\"cancel\");\n    }\n  }\n};\n",{"version":3,"sources":["map.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AAKA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"map.vue","sourceRoot":"src/components/Owner/components","sourcesContent":["<template>\n  <v-container fluid=\"\"  style=\"background:white\">\n    \n  \n  \n    \n      <v-row justify=\"center\" class=\"mb-6\"  >\n        <label style=\"margin-top:10px;font-size:22px;font-weight:bold\">حدد موقع الحجز</label>\n      </v-row>\n      <!-- <v-row justify=\"center\" class=\"mb-3\">\n        \n   <v-card style=\"padding-top:5px;padding-right:10px; margin-left:10px\" >\n     <gmap-autocomplete\n          @place_changed=\"setPlace\"\n         \n          >\n        </gmap-autocomplete>\n   </v-card>\n\n\n        <v-btn color=\"primary\" dense @click=\"addMarker\">اضافة\n          <v-icon left=\"\" size=\"15\">fas fa-location-arrow</v-icon>\n          </v-btn> \n      </v-row> -->\n     \n\n \n   \n    <gmap-map id=\"googleMap\"\n      :center=\"center\"\n      :zoom=\"12\"\n      style=\"width:100%;  height: 400px;\"\n      @click.native=\"setPlace\"\n      :clickable=\"true\"\n        :draggable=\"true\"\n       \n    >\n       <gmap-marker\n        :key=\"index\"\n        v-for=\"(m, index) in markers\"\n        :position=\"m.position\"\n        @click=\"center=m.position\"\n      ></gmap-marker>\n    </gmap-map>\n    <v-divider></v-divider>\n<v-container >\n    <v-row style=\"width:650px\"> \n\n<v-btn color=\"primary\"  @click=\"addMarker\">\n  \n    <v-icon right=\"\">fas fa-location-arrow</v-icon>\n <label class=\"map_btn\">  تحديد موقعي\n </label>\n</v-btn>\n<v-spacer></v-spacer>\n  <v-btn color=\"success\" @click=\"getlocation\"> <label class=\"map_btn\"> اضافة</label></v-btn>\n<span style=\"width:10px\"></span>\n   <v-btn color=\"#ff0000\" dark=\"\" @click=\"cancelDailog\"> <label class=\"map_btn\"> \n     الغاء\n     </label>\n     </v-btn>\n\n    </v-row>\n    </v-container>\n\n  </v-container>\n</template>\n\n<script>\n\n\n\n\n\nexport default {\n   props: {\n      'latt': String,\n      'long': String\n    },\n  name: \"GoogleMap\",\n  data() {\n    return {\n      // default to Montreal to keep it simple\n      // change this to whatever makes sense\n      center: { lat: 45.508, lng: -73.587 },\n      markers: [],\n      places: [],\n      lat:0,\n      lng:0,\n      currentPlace: null\n    };\n  },\n\n  mounted() {\n    this.geolocate()\n\n       \n      \n        const marker = {\n          lat: parseFloat(this.latt),\n       lng: parseFloat(this.long)\n       };\n            this.markers.push({ position: marker });\n        this.places.push(position);\n        this.center = marker;\n        this.currentPlace = null;\n        this.lat=position.coords.latitude;\n        this.lng=position.coords.longitude;\n   \n\n   \n  },\n\n  methods: {\n    // receives a place object via the autocomplete component\n    setPlace(place) {\n    this.currentPlace = place;\n    console.log(this.currentPlace)\n   \n\n    },\n    addMarker() {\n      // if (this.currentPlace) {\n      //   const marker = {\n      //     lat: this.currentPlace.geometry.location.lat(),\n      //     lng: this.currentPlace.geometry.location.lng()\n      //   };\n      //   this.markers.push({ position: marker });\n      //   this.places.push(this.currentPlace);\n      //   this.center = marker;\n      //   this.currentPlace = null;\n      // }\n       navigator.geolocation.getCurrentPosition(position => {\n\n       \n        this.lat= position.coords.latitude;\n        this.lng=position.coords.longitude;\n        const marker = {\n          lat: this.lat,\n       lng: this.lng\n       };\n            this.markers.push({ position: marker });\n        this.places.push(position);\n        this.center = marker;\n        this.currentPlace = null;\n        this.lat=position.coords.latitude;\n        this.lng=position.coords.longitude;\n      });\n\n     \n      \n\n    },\n    geolocate: function() {\n      navigator.geolocation.getCurrentPosition(position => {\n\n        this.center = {\n          lat: position.coords.latitude,\n          lng: position.coords.longitude\n        };\n      \n      });\n   \n     \n       //this.$emit(\"getmyLocation\",this.center.lat,this.center.lng);\n    },\n    getlocation(){\n      this.$emit(\"getmyLocation\",this.lat,this.lng);\n    },\n     cancelDailog(){\n      this.$emit(\"cancel\");\n    }\n  }\n};\n</script>"]}]}